 Technical Definition:
The response object (written as res) in Express is used by the server to send back a response to the client.
It gives you methods to:

Send text, JSON, or HTML

Set status codes

Redirect users

Set headers and cookies


 Simple Bhasha (Kindergarten Style):

Soch le tu restaurant me waiter ko order deta hai (req)
Aur phir waiter tere liye food leke aata hai (res)
Jo waiter laaya, exact wahi tera res object hai.

Commonly Used res Methods:

Method | Purpose
res.send() | Send string, buffer, or object (auto-detects)
res.json() | Send JSON response
res.status() | Set HTTP status code
res.redirect() | Redirect to another route
res.set() | Set headers
res.sendFile() | Send a file to the client
res.cookie() | Set cookie


🔁 Chhota Flow Example:

app.post('/login', (req, res) => {
  const { username, password } = req.body;

  if (username === 'admin' && password === '123') {
    res.status(200).json({ message: "Login successful" });
  } else {
    res.status(401).json({ message: "Invalid credentials" });
  }
});


🧠 Breakdown:
We read client input via req.body

Then we send a reply using res.status().json()


🧾 Interview-Ready One-Liner:
“The res object is used by the Express server to send responses to the client, whether it’s data, files, status codes, or redirection.”

req + res Together


app.get('/user/:id', (req, res) => {
  const id = req.params.id;
  res.send(`User ID is ${id}`);
});

\
Yahaan:

req.params.id se input mila

res.send() se output gaya